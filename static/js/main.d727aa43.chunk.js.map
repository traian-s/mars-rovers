{"version":3,"sources":["redux/actionTypes.ts","redux/rovers/RoverReducer.ts","constants.ts","redux/form/FormReducer.ts","redux/images/ImageReducer.ts","redux/reducers.ts","redux/store.ts","components/Rovers.tsx","components/RoverImages.tsx","components/RoverSelector.tsx","redux/form/FormActions.ts","components/EarthDateSelector.tsx","components/SolDateSelector.tsx","components/DateTypeSelector.tsx","components/CameraSelector.tsx","components/RoverForm.tsx","redux/images/ImagesActions.ts","App.tsx","redux/rovers/RoverActions.ts","index.tsx"],"names":["FETCH_ROVERS_PENDING","FETCH_ROVERS_SUCCESS","FETCH_ROVERS_ERROR","SET_DATE_TYPE","SELECT_ROVER","SELECT_EARTH_DATE","SELECT_SOL_DATE","SELECT_CAMERA","FETCH_IMAGES_PENDING","FETCH_IMAGES_SUCCESS","FETCH_IMAGES_ERROR","initialState","pending","rovers","error","DATE_TYPES","MISSION_BADGE","dateType","roverName","earthDate","solDate","camera","selectedRover","cameras","images","combineReducers","roverReducer","state","action","type","payload","formReducer","name","max_date","max_sol","imageReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","connect","map","rover","Col","className","lg","key","id","src","alt","status","Badge","variant","total_photos","launch_date","Pending","Error","Row","Spinner","animation","length","Carousel","row","Item","img_src","Caption","full_name","earth_date","sol","selectRover","dummyRover","landing_date","Form","Group","controlId","Label","Control","as","onChange","event","target","value","find","e","entry","index","selectEarthDate","disabled","min","max","selectSolDate","activeType","setDateType","Text","onClick","selectCamera","formData","fetchImages","dispatch","getState","url","axios","get","then","res","data","photos","catch","response","errors","useEffect","WelcomeContent","href","rel","fetchError","fetchPending","fetchRovers","Fragment","Navbar","fixed","Brand","width","height","Container","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.d727aa43.chunk.js","sourcesContent":["export const FETCH_ROVERS_PENDING = \"FETCH_ROVERS_PENDING\";\nexport const FETCH_ROVERS_SUCCESS = \"FETCH_ROVERS_SUCCESS\";\nexport const FETCH_ROVERS_ERROR = \"FETCH_ROVERS_ERROR\";\n\nexport const SET_DATE_TYPE = \"SET_DATE_TYPE\";\nexport const SELECT_ROVER = \"SELECT_ROVER\";\nexport const SELECT_EARTH_DATE = \"SELECT_EARTH_DATE\";\nexport const SELECT_SOL_DATE = \"SELECT_SOL_DATE\";\nexport const SELECT_CAMERA = \"SELECT_CAMERA\";\n\nexport const FETCH_IMAGES_PENDING = \"FETCH_IMAGES_PENDING\";\nexport const FETCH_IMAGES_SUCCESS = \"FETCH_IMAGES_SUCCESS\";\nexport const FETCH_IMAGES_ERROR = \"FETCH_IMAGES_ERROR\";\n","import {FETCH_ROVERS_ERROR, FETCH_ROVERS_PENDING, FETCH_ROVERS_SUCCESS} from \"../actionTypes\";\nimport {RoverActionTypes} from \"./RoverTypes\";\n\nexport const initialState = {\n    pending: false,\n    rovers: [{}],\n    error: ''\n};\n\nexport default function roverReducer(state = initialState, action: RoverActionTypes) {\n    switch (action.type) {\n        case FETCH_ROVERS_PENDING:\n            return {\n                ...state,\n                pending: true,\n                error: '',\n                rovers: []\n            };\n        case FETCH_ROVERS_SUCCESS:\n            return {\n                ...state,\n                pending: false,\n                rovers: action.payload\n            };\n        case FETCH_ROVERS_ERROR:\n            return {\n                ...state,\n                pending: false,\n                error: action.payload,\n                rovers: []\n            };\n        default:\n            return state;\n    }\n}\n","export const DATE_TYPES = {\n    EARTH: \"Earth\",\n    SOL: \"Sol\"\n};\n\nexport const MISSION_BADGE = {\n    primary: \"active\",\n    success: \"complete\"\n};\n\nexport const API_ROVERS_ENDPOINT = \"https://mars-photos.herokuapp.com/api/v1/rovers/\";\n","import {SELECT_CAMERA, SELECT_EARTH_DATE, SELECT_ROVER, SELECT_SOL_DATE, SET_DATE_TYPE,} from \"../actionTypes\";\nimport {DATE_TYPES} from \"../../constants\";\nimport {FormActionTypes, formReducerProps} from \"./FormTypes\";\n\nexport const initialState: formReducerProps = {\n    dateType: DATE_TYPES.EARTH,\n    roverName: \"\",\n    earthDate: \"\",\n    solDate: \"\",\n    camera: \"\",\n// @ts-ignore\n    selectedRover: {\n        cameras: []\n    }\n};\n\nexport default function formReducer(state = initialState, action: FormActionTypes) {\n    switch (action.type) {\n        case SELECT_ROVER:\n            return {\n                ...state,\n                selectedRover: action.payload,\n                roverName: action.payload.name,\n                earthDate: action.payload.max_date,\n                solDate: action.payload.max_sol,\n                camera: \"\"\n            };\n        case SET_DATE_TYPE:\n            return {\n                ...state,\n                dateType: action.payload\n            };\n        case SELECT_EARTH_DATE:\n            return {\n                ...state,\n                earthDate: action.payload\n            };\n        case SELECT_SOL_DATE:\n            return {\n                ...state,\n                solDate: action.payload\n            };\n        case SELECT_CAMERA:\n            return {\n                ...state,\n                camera: action.payload\n            };\n        default: {\n            return state;\n        }\n    }\n}\n","import {FETCH_IMAGES_ERROR, FETCH_IMAGES_PENDING, FETCH_IMAGES_SUCCESS} from \"../actionTypes\";\nimport {imageReducerProps, ImagesActionTypes} from \"./ImageTypes\";\n\nexport const initialState: imageReducerProps = {\n    error: '',\n    images: [],\n    pending: false\n};\n\nexport default function imageReducer(state = initialState, action: ImagesActionTypes) {\n    switch (action.type) {\n        case FETCH_IMAGES_PENDING:\n            return {\n                ...state,\n                error: '',\n                pending: true\n            };\n        case FETCH_IMAGES_SUCCESS:\n            return {\n                ...state,\n                images: action.payload,\n                pending: false\n            };\n        case FETCH_IMAGES_ERROR:\n            return {\n                ...state,\n                error: action.payload,\n                images: [],\n                pending: false\n            };\n        default:\n            return state;\n    }\n}\n","import {combineReducers} from \"redux\";\nimport roverReducer from \"./rovers/RoverReducer\";\nimport formReducer from \"./form/FormReducer\";\nimport imageReducer from \"./images/ImageReducer\";\nimport {FormState} from \"./form/FormTypes\";\nimport {RoverState} from \"./rovers/RoverTypes\";\nimport {ImageState} from \"./images/ImageTypes\";\n\nexport default combineReducers({roverReducer, formReducer, imageReducer});\n\nexport interface AppState {\n    formReducer: FormState,\n    roverReducer: RoverState,\n    imageReducer: ImageState\n}\n\n","import {applyMiddleware, compose, createStore} from 'redux';\nimport rootReducer from \"./reducers\";\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, /* preloadedState, */ composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nexport default store;\n","import React from 'react'\nimport {Badge, Col} from 'react-bootstrap';\nimport {MISSION_BADGE} from '../constants';\nimport {RoverProps} from \"../redux/rovers/RoverTypes\";\nimport {connect} from \"react-redux\";\nimport {AppState} from \"../redux/reducers\";\n\n\nexport const Rovers = ({rovers}: any) => {\n    return (\n        rovers.map((rover: RoverProps) =>\n            <Col className=\"roverCol\" lg=\"4\" key={rover.id}>\n                <h4>{rover.name}</h4>\n                <img src={\"images/\" + rover.name + \"_rover.jpg\"} alt={rover.name} className=\"w-100\"/>\n                <table className=\"w-100\">\n                    <tbody>\n                    <tr>\n                        <td>Mission Status:</td>\n                        <td>\n                            {MISSION_BADGE.success === rover.status && <Badge variant=\"success\">{rover.status}</Badge>}\n                            {MISSION_BADGE.primary === rover.status && <Badge variant=\"primary\">{rover.status}</Badge>}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>Photos Taken:</td>\n                        <td><span>{rover.total_photos}</span></td>\n                    </tr>\n                    <tr>\n                        <td>Launch Date:</td>\n                        <td><span>{rover.launch_date}</span></td>\n                    </tr>\n                    <tr>\n                        <td>Sols:</td>\n                        <td><span>{rover.max_sol}</span></td>\n                    </tr>\n                    </tbody>\n                </table>\n            </Col>\n        )\n    )\n};\n\nexport const mapStateToProps = (state: AppState) => {\n    return {\n        rovers: state.roverReducer.rovers\n    };\n};\n\nexport default connect(\n    mapStateToProps\n)(Rovers);\n","import React from 'react'\nimport {Carousel, Col, Row, Spinner} from 'react-bootstrap';\n\nimport {connect} from \"react-redux\";\nimport {ImageProps} from \"../redux/images/ImageTypes\";\nimport {AppState} from \"../redux/reducers\";\n\nexport const RoverImages = ({images, Pending, Error}:\n                                { images: ImageProps[] | null, Pending: boolean, Error: string }) => {\n    return (\n        <Row className=\"result_list justify-content-center\">\n            <Col lg={6}>\n                {Pending && <>Searching for Images... <Spinner animation=\"grow\"></Spinner></>}\n\n                {null !== images && images.length > 0 &&\n                <Carousel>\n                    {images.map((row) =>\n                        <Carousel.Item key={row.id}>\n                            <img\n                                className=\"d-block w-100\"\n                                src={row.img_src}\n                                alt=\"{row.id}\"\n                            />\n                            <Carousel.Caption>\n                                <h3>{row.id}</h3>\n                                <p>Taken\n                                    by {row.camera.full_name} ({row.camera.name}) <br/>\n                                    on {row.earth_date} (Sol {row.sol})\n                                </p>\n                            </Carousel.Caption>\n                        </Carousel.Item>)}\n                </Carousel>\n                }\n                {null !== images && 1 > images.length && !Pending && !Error &&\n                <p> No images found for selected parameters...</p>}\n                {Error &&\n                <p className=\"errorMessage\">The following errors occurred: {Error}</p>}\n            </Col>\n        </Row>\n    )\n};\n\nexport const mapStateToProps = (state: AppState) => {\n    return {\n        images: state.imageReducer.images,\n        Pending: state.imageReducer.pending,\n        Error: state.imageReducer.error\n    };\n};\n\nexport default connect(mapStateToProps)(RoverImages);\n","import React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport {selectRover} from \"../redux/form/FormActions\";\nimport {RoverProps} from \"../redux/rovers/RoverTypes\";\nimport {FormControlProps} from \"react-bootstrap/es\";\nimport {SelectRoverProps} from \"../redux/form/FormTypes\";\nimport {AppState} from \"../redux/reducers\";\n\nexport const RoverSelector = ({selectRover, rovers}: SelectRoverProps) => {\n    const dummyRover: RoverProps = {\n        id: 0,\n        name: '',\n        landing_date: '',\n        launch_date: '',\n        status: '',\n        max_sol: '',\n        max_date: '',\n        total_photos: 0,\n        cameras: []\n    };\n    return (\n        <Form.Group controlId=\"roverSelector\">\n            <Form.Label>Rover</Form.Label>\n            <Form.Control as=\"select\" name=\"selectedRover\"\n                          onChange={(event: React.ChangeEvent<FormControlProps>) =>\n                              event.target &&\n                              event.target.value &&\n                              selectRover(rovers.find(e => e.name === event.target.value) || dummyRover)}>\n                <option value=\"\">Select Rover...</option>\n                {rovers.map((entry, index) => <option key={index} value={entry.name}>{entry.name}</option>)}\n            </Form.Control>\n        </Form.Group>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        rovers: state.roverReducer.rovers\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {selectRover}\n)(RoverSelector);\n","import {SELECT_CAMERA, SELECT_EARTH_DATE, SELECT_ROVER, SELECT_SOL_DATE, SET_DATE_TYPE} from \"../actionTypes\";\nimport {RoverProps} from \"../rovers/RoverTypes\";\nimport {\n    SelectCameraAction,\n    SelectDateTypeAction,\n    SelectEarthDateAction,\n    SelectRoverAction,\n    SelectSolDateAction\n} from \"./FormTypes\";\n\nexport const selectRover = (payload: RoverProps): SelectRoverAction => ({\n    type: SELECT_ROVER, payload\n});\n\nexport const selectEarthDate = (payload: string): SelectEarthDateAction => ({\n    type: SELECT_EARTH_DATE, payload\n});\n\nexport const selectSolDate = (payload: string): SelectSolDateAction => ({\n    type: SELECT_SOL_DATE, payload\n});\n\nexport const selectCamera = (payload: string): SelectCameraAction => ({\n    type: SELECT_CAMERA, payload\n});\n\nexport const setDateType = (payload: string): SelectDateTypeAction => ({\n    type: SET_DATE_TYPE, payload\n});\n","import React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport {selectEarthDate} from \"../redux/form/FormActions\";\nimport {EarthDateSelectorProps} from \"../redux/form/FormTypes\";\nimport {FormControlProps} from \"react-bootstrap/es\";\nimport {AppState} from \"../redux/reducers\";\n\nexport const EarthDateSelector = ({earthDate, selectedRover, selectEarthDate}: EarthDateSelectorProps) => {\n\n    return (\n        <Form.Group controlId=\"earthDateSelector\">\n            <Form.Label>Earth Date</Form.Label>\n            <Form.Control disabled={!selectedRover.name}\n                          type=\"date\"\n                          name=\"earthDate\"\n                          min={selectedRover.landing_date ? selectedRover.landing_date : 0}\n                          max={selectedRover.max_date ? selectedRover.max_date : 0}\n                          value={earthDate}\n                          onChange={(e: React.ChangeEvent<FormControlProps>) =>\n                              e.target &&\n                              e.target.value &&\n                              selectEarthDate(e.target.value)\n                          }\n            />\n        </Form.Group>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        earthDate: state.formReducer.earthDate,\n        selectedRover: state.formReducer.selectedRover,\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {selectEarthDate}\n)(EarthDateSelector);\n","import React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport {selectSolDate} from \"../redux/form/FormActions\";\nimport {SolDateSelectorProps} from \"../redux/form/FormTypes\";\nimport {FormControlProps} from \"react-bootstrap/es\";\nimport {AppState} from \"../redux/reducers\";\n\nexport const SolDateSelector = ({selectedRover, solDate, selectSolDate}: SolDateSelectorProps) => {\n    return (\n        <Form.Group controlId=\"solDateSelector\">\n            <Form.Label>Sol Date</Form.Label>\n            <Form.Control disabled={!selectedRover.name}\n                          type=\"number\"\n                          name=\"solDate\"\n                          min=\"0\"\n                          value={solDate}\n                          max={selectedRover.max_sol ? selectedRover.max_sol : 0}\n                          onChange={(e: React.ChangeEvent<FormControlProps>) =>\n                              e.target &&\n                              e.target.value &&\n                              selectSolDate(e.target.value)}\n            />\n        </Form.Group>\n    );\n};\n\nexport const mapStateToProps = (state: AppState) => {\n    return {\n        selectedRover: state.formReducer.selectedRover,\n        solDate: state.formReducer.solDate\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {selectSolDate}\n)(SolDateSelector);\n","import React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport {setDateType} from \"../redux/form/FormActions\";\nimport {DATE_TYPES} from \"../constants\";\nimport {AppState} from \"../redux/reducers\";\nimport {DateTypeSelectorProps} from \"../redux/form/FormTypes\";\n\nexport const DateTypeSelector = ({activeType, setDateType}: DateTypeSelectorProps) => {\n    return (\n        <Form.Text className=\"text-muted\">\n          <span\n              className=\"date-switcher underlineHover\"\n              onClick={() => setDateType(DATE_TYPES.EARTH === activeType ? DATE_TYPES.SOL : DATE_TYPES.EARTH)}>\n            Switch to {DATE_TYPES.EARTH === activeType ? DATE_TYPES.SOL : DATE_TYPES.EARTH} date?\n          </span>\n        </Form.Text>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => {\n    return {activeType: state.formReducer.dateType};\n};\n\nexport default connect(\n    mapStateToProps,\n    {setDateType}\n)(DateTypeSelector);\n","import React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport {selectCamera} from \"../redux/form/FormActions\";\nimport {CameraSelectorProps} from \"../redux/form/FormTypes\";\nimport {FormControlProps} from \"react-bootstrap/es\";\nimport {AppState} from \"../redux/reducers\";\n\nexport const CameraSelector = ({selectedRover, selectCamera}: CameraSelectorProps) => {\n    return (\n        <Form.Group controlId={\"cameraSelector\"}>\n            <Form.Label>Camera</Form.Label>\n            <Form.Control as=\"select\" name=\"camera\" disabled={!selectedRover || !selectedRover.name}\n                          onChange={(e: React.ChangeEvent<FormControlProps>) =>\n                              e.target &&\n                              e.target.value &&\n                              selectCamera(e.target.value)}>\n                <option value=\"\">Any</option>\n                {selectedRover &&\n                selectedRover.cameras.map((entry, index) =>\n                    <option key={index} value={entry.name}>{entry.full_name}</option>)}\n            </Form.Control>\n        </Form.Group>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        selectedRover: state.formReducer.selectedRover\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {selectCamera}\n)(CameraSelector);\n","import React, {useEffect} from 'react'\nimport {Col, Form, Row} from 'react-bootstrap';\nimport {connect} from \"react-redux\";\n\nimport RoverSelector from './RoverSelector';\nimport EarthDateSelector from './EarthDateSelector';\nimport SolDateSelector from './SolDateSelector';\nimport DateTypeSelector from './DateTypeSelector';\nimport CameraSelector from './CameraSelector';\nimport {DATE_TYPES} from \"../constants\";\n\nimport {fetchImages} from \"../redux/images/ImagesActions\";\nimport {formReducerProps} from \"../redux/form/FormTypes\";\nimport {AppState} from \"../redux/reducers\";\n\nexport const RoverForm = ({formData, fetchImages}: { formData: formReducerProps, fetchImages: () => void }) => {\n\n    useEffect(() => {\n        fetchImages();\n    });\n\n    return (\n        <Col lg={12}>\n            <h2>Query the database</h2>\n            <Form className=\"roverForm largeSpacer\">\n                <Row>\n                    <Col lg={4}>\n                        <RoverSelector/>\n                    </Col>\n                    <Col lg={4}>\n                        {DATE_TYPES.EARTH === formData.dateType && <EarthDateSelector/>}\n                        {DATE_TYPES.SOL === formData.dateType && <SolDateSelector/>}\n                        <DateTypeSelector/>\n                    </Col>\n                    <Col lg={4}>\n                        <CameraSelector/>\n                    </Col>\n                </Row>\n            </Form>\n        </Col>\n    )\n};\n\nexport const mapStateToProps = (state: AppState) => {\n    return {\n        formData: state.formReducer\n    };\n};\n\nexport default connect(mapStateToProps, {fetchImages})(RoverForm);\n","import axios from 'axios';\nimport {API_ROVERS_ENDPOINT, DATE_TYPES} from \"../../constants\";\nimport {FETCH_IMAGES_ERROR, FETCH_IMAGES_PENDING, FETCH_IMAGES_SUCCESS} from \"../actionTypes\";\nimport {FetchImagesErrorAction, FetchImagesPendingAction, FetchImagesSuccessAction, ImageProps} from \"./ImageTypes\";\nimport {AppState} from \"../reducers\";\n\nexport const fetchImagesPending = (): FetchImagesPendingAction => ({\n    type: FETCH_IMAGES_PENDING\n});\n\nexport const fetchImagesSuccess = (payload: ImageProps[]): FetchImagesSuccessAction => ({\n    type: FETCH_IMAGES_SUCCESS, payload\n});\n\nexport const fetchImagesError = (payload: string): FetchImagesErrorAction => ({\n    type: FETCH_IMAGES_ERROR, payload\n});\n\nexport const fetchImages = () => {\n    return (dispatch: any, getState: () => AppState) => {\n        const formData = getState().formReducer;\n        dispatch(fetchImagesPending());\n        let url =\n            `${API_ROVERS_ENDPOINT}${formData.roverName}/photos?`;\n        if (DATE_TYPES.EARTH === formData.dateType && formData.earthDate) {\n            url += `earth_date=${formData.earthDate}`;\n        } else if (DATE_TYPES.SOL === formData.dateType && formData.solDate) {\n            url += `sol=${formData.solDate}`;\n        }\n        if (formData.camera) {\n            url += `&camera=${formData.camera}`;\n        }\n\n        axios.get(url)\n            .then(res => {\n                dispatch(fetchImagesSuccess(res.data.photos));\n            })\n            .catch(error => {\n                dispatch(fetchImagesError(error.response.data.errors));\n            })\n    }\n};\n","import React, {useEffect} from 'react'\nimport {Col, Container, Navbar, Row, Spinner} from 'react-bootstrap';\n\nimport Rovers from './components/Rovers';\nimport RoverImages from './components/RoverImages';\nimport RoverForm from './components/RoverForm';\n\nimport {connect} from \"react-redux\";\nimport {fetchRovers} from \"./redux/rovers/RoverActions\";\nimport {RoverProps} from \"./redux/rovers/RoverTypes\";\nimport {AppState} from \"./redux/reducers\";\n\nexport const WelcomeContent = () => {\n    return (\n        <>\n            <h1>The App</h1>\n            <p>\n                This app uses NASA's Mars Rover Photos API (<a href=\"https://api.nasa.gov/api.html#MarsPhotos\"\n                                                               className=\"underlineHover\" target=\"_blank\"\n                                                               rel=\"noopener noreferrer\">link</a>) to display Photos\n                taken by the three Martian rovers filtered by a particular Earth (or Sol) date.\n                You may also filter the photos by specific camera. The app is written in React.js and uses the <a\n                rel=\"noopener noreferrer\" className=\"underlineHover\"\n                href=\"https://react-bootstrap.github.io/components/navbar/#navbars-colors\"\n                target=\"_blank\">react-bootstrap</a> framework.\n                <br/>\n                To begin simply choose one of the three Rovers and optionally filter the results by date and/or\n                camera.\n                Each time a filter is selected the app will send an request and fetch a new result set which will be\n                displayed.\n            </p>\n        </>\n    )\n};\nexport const App = ({fetchPending, fetchError, rovers, fetchRovers}: { fetchRovers: () => void, fetchPending: boolean, fetchError: string, rovers: RoverProps[] }) => {\n    useEffect(() => {\n        fetchRovers();\n    }, [fetchRovers]); /* <-- Fetch API data only on first render to avoid infinite loop --> */\n\n    return (\n        <React.Fragment>\n            <Navbar fixed=\"top\">\n                <Navbar.Brand href=\"#home\">\n                    <img\n                        alt=\"\"\n                        src=\"images/logo.svg\"\n                        width=\"30\"\n                        height=\"30\"\n                        className=\"d-inline-block align-top\"\n                    />\n                    {'Mars Rovers Photos With React.js'}\n                </Navbar.Brand>\n            </Navbar>\n            <Container>\n                <Row>\n                    <Col lg={12}>\n                        <WelcomeContent/>\n                        {false !== fetchPending && <><h3>Connecting... <Spinner animation=\"grow\"></Spinner></h3></>}\n                        {'' !== fetchError && <h3> An error occured while fetching Rover data.</h3>}\n                        {false === fetchPending &&\n                        '' === fetchError &&\n                        rovers.length &&\n                        <div className={'roversWrapper'}>\n                            <h2>Meet the Rovers</h2>\n                            <Row>\n                                <Rovers/>\n                            </Row>\n                            <Row>\n                                <div className=\"largeSpacer\"/>\n                                <RoverForm/>\n                            </Row>\n                            <Row>\n                                <Col lg={12}>\n                                    <div className=\"largeSpacer\"/>\n                                    <div className=\"resultList\">\n                                        <RoverImages/>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </div>}\n                    </Col>\n                </Row>\n            </Container>\n        </React.Fragment>\n    )\n};\n\nexport const mapStateToProps = (state: AppState) => {\n    return {\n        fetchError: state.roverReducer.error,\n        fetchPending: state.roverReducer.pending,\n        rovers: state.roverReducer.rovers\n    };\n};\n\nexport default connect(mapStateToProps, {fetchRovers})(App);\n","import {FETCH_ROVERS_ERROR, FETCH_ROVERS_PENDING, FETCH_ROVERS_SUCCESS} from \"../actionTypes\";\nimport axios from 'axios';\nimport {API_ROVERS_ENDPOINT} from \"../../constants\";\nimport {FetchRoversErrorAction, FetchRoversPendingAction, FetchRoversSuccessAction, RoverProps} from \"./RoverTypes\";\n\nexport const fetchRoversPending = (): FetchRoversPendingAction => ({\n    type: FETCH_ROVERS_PENDING\n});\n\nexport const fetchRoversSuccess = (payload: RoverProps[]): FetchRoversSuccessAction => ({\n    type: FETCH_ROVERS_SUCCESS, payload\n});\n\n\nexport const fetchRoversError = (payload: string): FetchRoversErrorAction => ({\n    type: FETCH_ROVERS_ERROR, payload\n});\n\nexport const fetchRovers = () => {\n    return (dispatch: any) => {\n        dispatch(fetchRoversPending());\n        axios.get(API_ROVERS_ENDPOINT)\n            .then(res => {\n                dispatch(fetchRoversSuccess(res.data.rovers));\n            })\n            .catch(error => {\n                dispatch(fetchRoversError(error));\n            })\n\n    };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nimport './index.scss';\nimport App from './App';\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    rootElement\n);\n"],"sourceRoot":""}