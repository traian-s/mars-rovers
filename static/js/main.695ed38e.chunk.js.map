{"version":3,"sources":["redux/actionTypes.ts","redux/rovers/RoverReducer.ts","constants.ts","redux/form/FormReducer.ts","redux/images/ImageReducer.ts","redux/reducers.ts","redux/store.ts","components/Navigation.tsx","components/Rovers.tsx","redux/form/FormActions.ts","redux/images/ImagesActions.ts","content/rovers.ts","components/RoverImagesList.tsx","components/Rover.tsx","components/WelcomeContent.tsx","components/RoverSelector.tsx","components/EarthDateSelector.tsx","components/SolDateSelector.tsx","components/DateTypeSelector.tsx","components/CameraSelector.tsx","components/RoverForm.tsx","components/RoverImages.tsx","components/Search.tsx","routes.tsx","App.tsx","redux/rovers/RoverActions.ts","index.tsx"],"names":["FETCH_ROVERS_PENDING","FETCH_ROVERS_SUCCESS","FETCH_ROVERS_ERROR","SET_DATE_TYPE","SELECT_ROVER","SELECT_EARTH_DATE","SELECT_SOL_DATE","SELECT_CAMERA","FETCH_IMAGES_PENDING","FETCH_IMAGES_SUCCESS","FETCH_IMAGES_ERROR","initialState","pending","rovers","error","DATE_TYPES","MISSION_BADGE","dummyRover","id","name","landing_date","launch_date","status","max_sol","max_date","total_photos","cameras","dateType","roverName","earthDate","solDate","camera","selectedRover","images","combineReducers","roverReducer","state","action","type","payload","formReducer","imageReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","Navigation","Navbar","fixed","expand","Brand","to","Toggle","aria-controls","Collapse","Nav","className","connect","map","rover","src","alt","Badge","variant","selectRover","fetchImages","dispatch","getState","formData","url","axios","get","then","res","data","photos","catch","response","errors","DESCRIPTIONS","Curiosity","Spirit","Opportunity","Object","freeze","Pending","Error","Row","Col","lg","Spinner","animation","length","row","img_src","useEffect","find","span","offset","href","target","rel","toLowerCase","Form","Group","controlId","Label","Control","as","onChange","event","value","e","entry","index","selected","key","selectEarthDate","disabled","min","max","selectSolDate","activeType","setDateType","Text","onClick","selectCamera","full_name","Carousel","Item","Caption","earth_date","sol","fetchError","fetchPending","routes","path","component","WelcomeContent","render","props","Search","from","fetchRovers","Fragment","basename","Container","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.695ed38e.chunk.js","sourcesContent":["export const FETCH_ROVERS_PENDING = \"FETCH_ROVERS_PENDING\";\nexport const FETCH_ROVERS_SUCCESS = \"FETCH_ROVERS_SUCCESS\";\nexport const FETCH_ROVERS_ERROR = \"FETCH_ROVERS_ERROR\";\n\nexport const SET_DATE_TYPE = \"SET_DATE_TYPE\";\nexport const SELECT_ROVER = \"SELECT_ROVER\";\nexport const SELECT_EARTH_DATE = \"SELECT_EARTH_DATE\";\nexport const SELECT_SOL_DATE = \"SELECT_SOL_DATE\";\nexport const SELECT_CAMERA = \"SELECT_CAMERA\";\n\nexport const FETCH_IMAGES_PENDING = \"FETCH_IMAGES_PENDING\";\nexport const FETCH_IMAGES_SUCCESS = \"FETCH_IMAGES_SUCCESS\";\nexport const FETCH_IMAGES_ERROR = \"FETCH_IMAGES_ERROR\";\n","import {FETCH_ROVERS_ERROR, FETCH_ROVERS_PENDING, FETCH_ROVERS_SUCCESS} from \"../actionTypes\";\nimport {RoverActionTypes} from \"./RoverTypes\";\n\nexport const initialState = {\n    pending: false,\n    rovers: [{}],\n    error: ''\n};\n\nexport default function roverReducer(state = initialState, action: RoverActionTypes) {\n    switch (action.type) {\n        case FETCH_ROVERS_PENDING:\n            return {\n                ...state,\n                pending: true,\n                error: '',\n                rovers: []\n            };\n        case FETCH_ROVERS_SUCCESS:\n            return {\n                ...state,\n                pending: false,\n                rovers: action.payload\n            };\n        case FETCH_ROVERS_ERROR:\n            return {\n                ...state,\n                pending: false,\n                error: action.payload,\n                rovers: []\n            };\n        default:\n            return state;\n    }\n}\n","import {RoverProps} from \"./redux/rovers/RoverTypes\";\n\nexport const DATE_TYPES = {\n    EARTH: \"Earth\",\n    SOL: \"Sol\"\n};\n\nexport const MISSION_BADGE = {\n    primary: \"active\",\n    success: \"complete\"\n};\n\nexport const API_ROVERS_ENDPOINT = \"https://mars-photos.herokuapp.com/api/v1/rovers/\";\n\nexport const dummyRover: RoverProps = {\n    id: 0,\n    name: '',\n    landing_date: '',\n    launch_date: '',\n    status: '',\n    max_sol: '',\n    max_date: '',\n    total_photos: 0,\n    cameras: []\n};","import {SELECT_CAMERA, SELECT_EARTH_DATE, SELECT_ROVER, SELECT_SOL_DATE, SET_DATE_TYPE,} from \"../actionTypes\";\nimport {DATE_TYPES} from \"../../constants\";\nimport {FormActionTypes, formReducerProps} from \"./FormTypes\";\n\nexport const initialState: formReducerProps = {\n    dateType: DATE_TYPES.EARTH,\n    roverName: \"\",\n    earthDate: \"\",\n    solDate: \"\",\n    camera: \"\",\n// @ts-ignore\n    selectedRover: {\n        cameras: []\n    }\n};\n\nexport default function formReducer(state = initialState, action: FormActionTypes) {\n    switch (action.type) {\n        case SELECT_ROVER:\n            return {\n                ...state,\n                selectedRover: action.payload,\n                roverName: action.payload.name,\n                earthDate: action.payload.max_date,\n                solDate: action.payload.max_sol,\n                camera: \"\"\n            };\n        case SET_DATE_TYPE:\n            return {\n                ...state,\n                dateType: action.payload\n            };\n        case SELECT_EARTH_DATE:\n            return {\n                ...state,\n                earthDate: action.payload\n            };\n        case SELECT_SOL_DATE:\n            return {\n                ...state,\n                solDate: action.payload\n            };\n        case SELECT_CAMERA:\n            return {\n                ...state,\n                camera: action.payload\n            };\n        default: {\n            return state;\n        }\n    }\n}\n","import {FETCH_IMAGES_ERROR, FETCH_IMAGES_PENDING, FETCH_IMAGES_SUCCESS} from \"../actionTypes\";\nimport {imageReducerProps, ImagesActionTypes} from \"./ImageTypes\";\n\nexport const initialState: imageReducerProps = {\n    error: '',\n    images: [],\n    pending: false\n};\n\nexport default function imageReducer(state = initialState, action: ImagesActionTypes) {\n    switch (action.type) {\n        case FETCH_IMAGES_PENDING:\n            return {\n                ...state,\n                error: '',\n                pending: true\n            };\n        case FETCH_IMAGES_SUCCESS:\n            return {\n                ...state,\n                images: action.payload,\n                pending: false\n            };\n        case FETCH_IMAGES_ERROR:\n            return {\n                ...state,\n                error: action.payload,\n                images: [],\n                pending: false\n            };\n        default:\n            return state;\n    }\n}\n","import {combineReducers} from \"redux\";\nimport roverReducer from \"./rovers/RoverReducer\";\nimport formReducer from \"./form/FormReducer\";\nimport imageReducer from \"./images/ImageReducer\";\nimport {FormState} from \"./form/FormTypes\";\nimport {RoverState} from \"./rovers/RoverTypes\";\nimport {ImageState} from \"./images/ImageTypes\";\n\nexport default combineReducers({roverReducer, formReducer, imageReducer});\n\nexport interface AppState {\n    formReducer: FormState,\n    roverReducer: RoverState,\n    imageReducer: ImageState\n}\n\n","import {applyMiddleware, compose, createStore} from 'redux';\nimport rootReducer from \"./reducers\";\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, /* preloadedState, */ composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nexport default store;\n","import {Navbar, Nav} from \"react-bootstrap\";\nimport React from \"react\";\nimport { Link } from 'react-router-dom';\n\nexport const Navigation = () =>\n<Navbar fixed=\"top\" expand={'lg'}>\n    <Navbar.Brand>\n        <Link to={'/home'}>\n            {'Mars Rovers'}\n        </Link>\n    </Navbar.Brand>\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className={'mr-auto'}>\n            <Link className={'nav-link'} to=\"curiosity\">Curiosity</Link>\n            <Link className={'nav-link'} to=\"spirit\">Spirit</Link>\n            <Link className={'nav-link'} to=\"opportunity\">Opportunity</Link>\n            <Link className={'nav-link'} to=\"search\">Search Images</Link>\n        </Nav>\n    </Navbar.Collapse>\n</Navbar>;","import React from 'react'\nimport {Badge, Col} from 'react-bootstrap';\nimport {MISSION_BADGE} from '../constants';\nimport {RoverProps} from \"../redux/rovers/RoverTypes\";\nimport {connect} from \"react-redux\";\nimport {AppState} from \"../redux/reducers\";\n\n\nexport const Rovers = ({rovers, name}: any) => {\n    return (\n        rovers.map((rover: RoverProps) => {\n                return rover.name === name && (\n                    <>\n                        <img src={\"https://raw.githubusercontent.com/traian-s/mars-rovers/master/public/images/\" + rover.name + \"_rover.jpg\"} alt={rover.name} className=\"w-100\"/>\n                        <table className=\"w-100\">\n                            <tbody>\n                            <tr>\n                                <td>Mission Status:</td>\n                                <td>\n                                    {MISSION_BADGE.success === rover.status &&\n                                    <Badge variant=\"success\">{rover.status}</Badge>}\n                                    {MISSION_BADGE.primary === rover.status &&\n                                    <Badge variant=\"primary\">{rover.status}</Badge>}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Photos Taken:</td>\n                                <td><span>{rover.total_photos}</span></td>\n                            </tr>\n                            <tr>\n                                <td>Launch Date:</td>\n                                <td><span>{rover.launch_date}</span></td>\n                            </tr>\n                            <tr>\n                                <td>Sols:</td>\n                                <td><span>{rover.max_sol}</span></td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </>\n                )\n            }\n        )\n    )\n};\n\nexport const mapStateToProps = (state: AppState) => {\n    return {\n        rovers: state.roverReducer.rovers\n    };\n};\n\nexport default connect(\n    mapStateToProps\n)(Rovers);\n","import {SELECT_CAMERA, SELECT_EARTH_DATE, SELECT_ROVER, SELECT_SOL_DATE, SET_DATE_TYPE} from \"../actionTypes\";\nimport {RoverProps} from \"../rovers/RoverTypes\";\nimport {\n    SelectCameraAction,\n    SelectDateTypeAction,\n    SelectEarthDateAction,\n    SelectRoverAction,\n    SelectSolDateAction\n} from \"./FormTypes\";\n\nexport const selectRover = (payload: RoverProps): SelectRoverAction => ({\n    type: SELECT_ROVER, payload\n});\n\nexport const selectEarthDate = (payload: string): SelectEarthDateAction => ({\n    type: SELECT_EARTH_DATE, payload\n});\n\nexport const selectSolDate = (payload: string): SelectSolDateAction => ({\n    type: SELECT_SOL_DATE, payload\n});\n\nexport const selectCamera = (payload: string): SelectCameraAction => ({\n    type: SELECT_CAMERA, payload\n});\n\nexport const setDateType = (payload: string): SelectDateTypeAction => ({\n    type: SET_DATE_TYPE, payload\n});\n","import axios from 'axios';\nimport {API_ROVERS_ENDPOINT, DATE_TYPES} from \"../../constants\";\nimport {FETCH_IMAGES_ERROR, FETCH_IMAGES_PENDING, FETCH_IMAGES_SUCCESS} from \"../actionTypes\";\nimport {FetchImagesErrorAction, FetchImagesPendingAction, FetchImagesSuccessAction, ImageProps} from \"./ImageTypes\";\nimport {AppState} from \"../reducers\";\n\nexport const fetchImagesPending = (): FetchImagesPendingAction => ({\n    type: FETCH_IMAGES_PENDING\n});\n\nexport const fetchImagesSuccess = (payload: ImageProps[]): FetchImagesSuccessAction => ({\n    type: FETCH_IMAGES_SUCCESS, payload\n});\n\nexport const fetchImagesError = (payload: string): FetchImagesErrorAction => ({\n    type: FETCH_IMAGES_ERROR, payload\n});\n\nexport const fetchImages = () => {\n    return (dispatch: any, getState: () => AppState) => {\n        const formData = getState().formReducer;\n        dispatch(fetchImagesPending());\n        let url =\n            `${API_ROVERS_ENDPOINT}${formData.roverName}/photos?`;\n        if (DATE_TYPES.EARTH === formData.dateType && formData.earthDate) {\n            url += `earth_date=${formData.earthDate}`;\n        } else if (DATE_TYPES.SOL === formData.dateType && formData.solDate) {\n            url += `sol=${formData.solDate}`;\n        }\n        if (formData.camera) {\n            url += `&camera=${formData.camera}`;\n        }\n\n        axios.get(url)\n            .then(res => {\n                dispatch(fetchImagesSuccess(res.data.photos));\n            })\n            .catch(error => {\n                dispatch(fetchImagesError(error.response.data.errors));\n            })\n    }\n};\n","export const DESCRIPTIONS: {Curiosity: string, Spirit: string, Opportunity: string} = {\n  Curiosity:\n    'Curiosity is a car-sized rover designed to explore the crater Gale on Mars as part of NASA\\'s Mars Science Laboratory mission (MSL).' +\n    'Curiosity was launched from Cape Canaveral on November 26, 2011, at 15:02 UTC and landed on Aeolis Palus inside Gale on Mars on August 6, 2012, ' +\n    '05:17 UTC.The Bradbury Landing site was less than 2.4 km (1.5 mi) from the center of the rover\\'s touchdown target after a 560 million' +\n    ' km (350 million mi) journey. The rover\\'s goals include an investigation of the Martian climate and geology; assessment of whether the' +\n    ' selected field site inside Gale has ever offered environmental conditions favorable for microbial life, including investigation of the role ' +\n    'of water; and planetary habitability studies in preparation for human exploration. In December 2012, Curiosity\\'s two-year mission was extended ' +\n    'indefinitely, and on August 5, 2017, NASA celebrated the fifth anniversary of the Curiosity rover landing. The rover is still operational, ' +\n    'and as of November 9, 2019 Curiosity has been on Mars for 2580 sols (2651 total days) since landing on August 6, 2012. Curiosity\\'s design ' +\n    'serves as the basis for the planned Mars 2020 rover, which will carry different scientific instruments.',\n  Spirit: 'Spirit, also known as MER-A (Mars Exploration Rover – A) or MER-2, is a robotic rover on Mars, active from 2004 to 2010. It was one of two ' +\n    'rovers of NASA\\'s Mars Exploration Rover Mission. It landed successfully within the impact crater Gusev on Mars at 04:35 Ground UTC on ' +\n    'January 4, 2004, three weeks before its twin, Opportunity (MER-B), which landed on the other side of the planet. Its name was chosen ' +\n    'through a NASA-sponsored student essay competition. The rover became stuck in a \"sand trap\" in late 2009 at an angle that hampered ' +\n    'recharging of its batteries; its last communication with Earth was sent on March 22, 2010.\\n' +\n    '\\n' +\n    'The rover completed its planned 90-sol mission. Aided by cleaning events that resulted in more energy from its solar panels, Spirit went on' +\n    ' to function effectively over twenty times longer than NASA planners expected. Spirit also logged 7.73 km (4.8 mi) of driving instead ' +\n    'of the planned 600 m (0.4 mi), allowing more extensive geological analysis of Martian rocks and planetary surface features. Initial ' +\n    'scientific results from the first phase of the mission (the 90-sol prime mission) were published in a special issue of the journal Science.\\n' +\n    '\\n' +\n    'On May 1, 2009 (5 years, 3 months, 27 Earth days after landing; 21.6 times the planned mission duration), Spirit became stuck in soft sand. ' +\n    'This was not the first of the mission\\'s \"embedding events\" and for the following eight months NASA carefully analyzed the situation, running ' +\n    'Earth-based theoretical and practical simulations, and finally programming the rover to make extrication drives in an attempt to free itself. ' +\n    'These efforts continued until January 26, 2010 when NASA officials announced that the rover was likely irrecoverably obstructed by its ' +\n    'location in soft sand, though it continued to perform scientific research from its current location.\\n' +\n    '\\n' +\n    'The rover continued in a stationary science platform role until communication with Spirit stopped on March 22, 2010 (sol 2208).' +\n    'JPL continued to attempt to regain contact until May 24, 2011, when NASA announced that efforts to communicate with the unresponsive rover had ' +\n    'ended, calling the mission complete. A formal farewell took place at NASA headquarters shortly thereafter.\\n' +\n    '\\n' +\n    'The Jet Propulsion Laboratory (JPL), a division of the California Institute of Technology in Pasadena, manages the Mars Exploration Rover ' +\n    'project for NASA\\'s Office of Space Science, Washington.',\n  Opportunity: 'Opportunity, also known as MER-B (Mars Exploration Rover – B) or MER-1, and nicknamed \"Oppy\", is a robotic rover that was active on Mars from 2004 ' +\n      'until the middle of 2018.[2] Launched on July 7, 2003, as part of NASA\\'s Mars Exploration Rover program, it landed in Meridiani Planum on January 25, 2004, ' +\n      'three weeks after its twin Spirit (MER-A) touched down on the other side of the planet. With a planned 90-sol duration of activity (slightly more than 90 ' +\n      'Earth days), Spirit functioned until it got stuck in 2009 and ceased communications in 2010, while Opportunity was able to stay operational for 5111 sols ' +\n      'after landing, maintaining its power and key systems through continual recharging of its batteries using solar power, and hibernating during events such ' +\n      'as dust storms to save power. This careful operation allowed Opportunity to exceed its operating plan by 14 years, 46 days (in Earth time), 55 times ' +\n      'its designed lifespan. By June 10, 2018, when it last contacted NASA, the rover had traveled a distance of 45.16 kilometers (28.06 miles).\\n' +\n      '\\n' +\n      'Mission highlights included the initial 90-sol mission, finding extramartian meteorites such as Heat Shield Rock (Meridiani Planum meteorite), ' +\n      'and over two years of exploring and studying Victoria crater. The rover survived moderate dust storms and in 2011 reached Endeavour crater, ' +\n      'which has been described as a \"second landing site\". The Opportunity mission is considered one of NASA\\'s most successful ventures.\\n' +\n      '\\n' +\n      'Due to the planetary 2018 dust storm on Mars, Opportunity ceased communications on June 10 and entered hibernation on June 12, 2018. It was hoped ' +\n      'it would reboot once the weather cleared, but it did not, suggesting either a catastrophic failure or that a layer of dust had covered ' +\n      'its solar panels. NASA hoped to re-establish contact with the rover, citing a windy period that could potentially clean off its solar panels. On February ' +\n      '13, 2019, NASA officials declared that the Opportunity mission was complete, after the spacecraft had failed to respond to over 1,000 signals sent ' +\n      'since August 2018.'\n};\n\nObject.freeze(DESCRIPTIONS);","import React from 'react'\nimport {Col, Row, Spinner} from 'react-bootstrap';\n\nimport {connect} from \"react-redux\";\nimport {ImageProps} from \"../redux/images/ImageTypes\";\nimport {AppState} from \"../redux/reducers\";\n\nexport const RoverImagesList = ({images, Pending, Error}:\n                                    { images: ImageProps[] | null, Pending: boolean, Error: string }) => {\n    return (\n        <Row className=\"images-list justify-content-center\">\n            <Col lg={12}><h2>Latest Images</h2></Col>\n            <Col lg={12}>\n                {Pending && <>Searching for Images... <Spinner animation=\"grow\"></Spinner></>}\n\n                {null !== images && images.length > 0 &&\n                images.map((row) =>\n                    <img\n                        src={row.img_src}\n                        alt=\"{row.id}\"/>\n                )}\n                {null !== images && 1 > images.length && !Pending && !Error &&\n                <p> No images found for selected parameters...</p>}\n                {Error &&\n                <p className=\"errorMessage\">The following errors occurred: {Error}</p>}\n                <br/><br/><br/>\n            </Col>\n        </Row>\n    )\n};\n\nexport const mapStateToProps = (state: AppState) => {\n    return {\n        images: state.imageReducer.images,\n        Pending: state.imageReducer.pending,\n        Error: state.imageReducer.error\n    };\n};\n\nexport default connect(mapStateToProps)(RoverImagesList);\n","import React, {useEffect} from 'react';\nimport {AppState} from '../redux/reducers';\nimport {connect} from 'react-redux';\nimport Rovers from './Rovers';\nimport {selectRover} from '../redux/form/FormActions';\nimport {fetchImages} from '../redux/images/ImagesActions';\nimport {DESCRIPTIONS} from '../content/rovers';\nimport {Col, Row} from 'react-bootstrap';\nimport {RoverProps} from '../redux/rovers/RoverTypes';\nimport {dummyRover} from \"../constants\";\nimport RoverImagesList from \"./RoverImagesList\";\n\n\nconst Rover = ({name, rovers, selectRover, fetchImages}: { name: string, rovers: any, selectRover: any, fetchImages: any }) => {\n    useEffect( ()  => {\n        rovers && selectRover(rovers.find( (rover:RoverProps) => rover.name === name) || dummyRover);\n        fetchImages();\n    }, []);\n    useEffect(() => {\n        fetchImages();\n    });\n\n    return (\n        <>\n            <h1>{name}</h1>\n            <Row>\n                <Col lg={6}>\n                    <p>\n                        {'Curiosity' === name && DESCRIPTIONS.Curiosity}\n                        {'Opportunity' === name && DESCRIPTIONS.Opportunity}\n                        {'Spirit' === name && DESCRIPTIONS.Spirit}\n                    </p>\n                </Col>\n                <Col lg={{span: 4, offset:2 }}>\n                    <Rovers name={name}/>\n                </Col>\n            </Row>\n            <RoverImagesList />\n        </>\n    )\n};\n\nexport const mapStateToProps = (state: AppState) => {\n    return {\n        rovers: state.roverReducer.rovers\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {selectRover, fetchImages}\n)(Rover);","import React from \"react\";\nimport {AppState} from \"../redux/reducers\";\nimport {connect} from \"react-redux\";\nimport {RoverProps} from \"../redux/rovers/RoverTypes\";\nimport { Link } from \"react-router-dom\";\n\nconst WelcomeContent = ({rovers}: any) => {\n    return (\n        <>\n            <h1>The App</h1>\n            <p>\n                This app uses NASA's Mars Rover Photos API (<a href=\"https://api.nasa.gov/api.html#MarsPhotos\"\n                                                               className=\"underlineHover\" target=\"_blank\"\n                                                               rel=\"noopener noreferrer\">link</a>) to display Photos\n                taken by the three Martian rovers filtered by a particular Earth (or Sol) date.\n                You may also filter the photos by specific camera. You can find out about each Rover and view the latest\n                photos taken by them or simply query the database to find photos taken on specific days.\n                <br/><br/>\n                The following resources and technologies were used in building the app:<br/><br/>\n                <a href={\"https://www.typescriptlang.org/\"}>TypeScript</a><br/>\n                <a href={\"https://reactjs.org/\"}>React.js</a><br/>\n                <a href={\"https://redux.js.org/\"}>Redux</a><br/>\n                <a href={\"https://getbootstrap.com/\"}>Bootstrap</a><br/>\n                <a href={\"https://type-scale.com/\"}>Type Scale</a><br/>\n                <a href={\"https://color.adobe.com/create\"}>Adobe Color</a><br/>\n                <a href={\"https://fonts.google.com/specimen/Inconsolata\"}>Inconsolata Font</a><br/>\n                <a href={\"https://fonts.google.com/specimen/Montserrat\"}>Montserrat Font</a><br/>\n            </p>\n            <div className={'rovers-intro'}>\n                {rovers.length > 0 && rovers.map((rover: RoverProps) =>\n                    rover.name && <Link to={`${rover.name.toLowerCase()}`}>\n                        <h4>{rover.name}</h4>\n                        <img src={\"https://raw.githubusercontent.com/traian-s/mars-rovers/master/public/images/\" + rover.name + \"_rover.jpg\"} alt={rover.name} className=\"w-100\"/>\n                    </Link>\n                )}\n            </div>\n        </>\n    )\n};\n\nexport const mapStateToProps = (state: AppState) => {\n    return {\n        rovers: state.roverReducer.rovers\n    };\n};\n\nexport default connect(\n    mapStateToProps\n)(WelcomeContent);","import React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport {selectRover} from \"../redux/form/FormActions\";\nimport {RoverProps} from \"../redux/rovers/RoverTypes\";\nimport {FormControlProps} from \"react-bootstrap/es\";\nimport {SelectRoverProps} from \"../redux/form/FormTypes\";\nimport {AppState} from \"../redux/reducers\";\n\nexport const RoverSelector = ({selectRover, rovers, selectedRover}: SelectRoverProps) => {\n    const dummyRover: RoverProps = {\n        id: 0,\n        name: '',\n        landing_date: '',\n        launch_date: '',\n        status: '',\n        max_sol: '',\n        max_date: '',\n        total_photos: 0,\n        cameras: []\n    };\n    return (\n        <Form.Group controlId=\"roverSelector\">\n            <Form.Label>Rover</Form.Label>\n            <Form.Control as=\"select\" name=\"selectedRover\"\n                          onChange={(event: React.ChangeEvent<FormControlProps>) =>\n                              event.target &&\n                              event.target.value &&\n                              selectRover(rovers.find(e => e.name === event.target.value) || dummyRover)}>\n                <option value=\"\">Select Rover...</option>\n                {rovers.map((entry, index) => <option selected={entry.name === selectedRover} key={index} value={entry.name}>{entry.name}</option>)}\n            </Form.Control>\n        </Form.Group>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        rovers: state.roverReducer.rovers,\n        selectedRover: state.formReducer.roverName\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {selectRover}\n)(RoverSelector);\n","import React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport {selectEarthDate} from \"../redux/form/FormActions\";\nimport {EarthDateSelectorProps} from \"../redux/form/FormTypes\";\nimport {FormControlProps} from \"react-bootstrap/es\";\nimport {AppState} from \"../redux/reducers\";\n\nexport const EarthDateSelector = ({earthDate, selectedRover, selectEarthDate}: EarthDateSelectorProps) => {\n\n    return (\n        <Form.Group controlId=\"earthDateSelector\">\n            <Form.Label>Earth Date</Form.Label>\n            <Form.Control disabled={!selectedRover.name}\n                          type=\"date\"\n                          name=\"earthDate\"\n                          min={selectedRover.landing_date ? selectedRover.landing_date : 0}\n                          max={selectedRover.max_date ? selectedRover.max_date : 0}\n                          value={earthDate}\n                          onChange={(e: React.ChangeEvent<FormControlProps>) =>\n                              e.target &&\n                              e.target.value &&\n                              selectEarthDate(e.target.value)\n                          }\n            />\n        </Form.Group>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        earthDate: state.formReducer.earthDate,\n        selectedRover: state.formReducer.selectedRover,\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {selectEarthDate}\n)(EarthDateSelector);\n","import React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport {selectSolDate} from \"../redux/form/FormActions\";\nimport {SolDateSelectorProps} from \"../redux/form/FormTypes\";\nimport {FormControlProps} from \"react-bootstrap/es\";\nimport {AppState} from \"../redux/reducers\";\n\nexport const SolDateSelector = ({selectedRover, solDate, selectSolDate}: SolDateSelectorProps) => {\n    return (\n        <Form.Group controlId=\"solDateSelector\">\n            <Form.Label>Sol Date</Form.Label>\n            <Form.Control disabled={!selectedRover.name}\n                          type=\"number\"\n                          name=\"solDate\"\n                          min=\"0\"\n                          value={solDate}\n                          max={selectedRover.max_sol ? selectedRover.max_sol : 0}\n                          onChange={(e: React.ChangeEvent<FormControlProps>) =>\n                              e.target &&\n                              e.target.value &&\n                              selectSolDate(e.target.value)}\n            />\n        </Form.Group>\n    );\n};\n\nexport const mapStateToProps = (state: AppState) => {\n    return {\n        selectedRover: state.formReducer.selectedRover,\n        solDate: state.formReducer.solDate\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {selectSolDate}\n)(SolDateSelector);\n","import React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport {setDateType} from \"../redux/form/FormActions\";\nimport {DATE_TYPES} from \"../constants\";\nimport {AppState} from \"../redux/reducers\";\nimport {DateTypeSelectorProps} from \"../redux/form/FormTypes\";\n\nexport const DateTypeSelector = ({activeType, setDateType}: DateTypeSelectorProps) => {\n    return (\n        <Form.Text className=\"text-muted\">\n          <span\n              className=\"date-switcher underlineHover\"\n              onClick={() => setDateType(DATE_TYPES.EARTH === activeType ? DATE_TYPES.SOL : DATE_TYPES.EARTH)}>\n            Switch to {DATE_TYPES.EARTH === activeType ? DATE_TYPES.SOL : DATE_TYPES.EARTH} date?\n          </span>\n        </Form.Text>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => {\n    return {activeType: state.formReducer.dateType};\n};\n\nexport default connect(\n    mapStateToProps,\n    {setDateType}\n)(DateTypeSelector);\n","import React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport {selectCamera} from \"../redux/form/FormActions\";\nimport {CameraSelectorProps} from \"../redux/form/FormTypes\";\nimport {FormControlProps} from \"react-bootstrap/es\";\nimport {AppState} from \"../redux/reducers\";\n\nexport const CameraSelector = ({selectedRover, selectCamera}: CameraSelectorProps) => {\n    return (\n        <Form.Group controlId={\"cameraSelector\"}>\n            <Form.Label>Camera</Form.Label>\n            <Form.Control as=\"select\" name=\"camera\" disabled={!selectedRover || !selectedRover.name}\n                          onChange={(e: React.ChangeEvent<FormControlProps>) =>\n                              e.target &&\n                              e.target.value &&\n                              selectCamera(e.target.value)}>\n                <option value=\"\">Any</option>\n                {selectedRover &&\n                selectedRover.cameras.map((entry, index) =>\n                    <option key={index} value={entry.name}>{entry.full_name}</option>)}\n            </Form.Control>\n        </Form.Group>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        selectedRover: state.formReducer.selectedRover\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {selectCamera}\n)(CameraSelector);\n","import React, {useEffect} from 'react'\nimport {Col, Form, Row} from 'react-bootstrap';\nimport {connect} from \"react-redux\";\n\nimport RoverSelector from './RoverSelector';\nimport EarthDateSelector from './EarthDateSelector';\nimport SolDateSelector from './SolDateSelector';\nimport DateTypeSelector from './DateTypeSelector';\nimport CameraSelector from './CameraSelector';\nimport {DATE_TYPES} from \"../constants\";\n\nimport {fetchImages} from \"../redux/images/ImagesActions\";\nimport {formReducerProps} from \"../redux/form/FormTypes\";\nimport {AppState} from \"../redux/reducers\";\n\nexport const RoverForm = ({formData, fetchImages}: { formData: formReducerProps, fetchImages: () => void }) => {\n\n    useEffect(() => {\n        fetchImages();\n    });\n\n    return (\n        <Col lg={12}>\n            <h2>Query the database</h2>\n            <Form className=\"roverForm largeSpacer\">\n                <Row>\n                    <Col lg={4}>\n                        <RoverSelector/>\n                    </Col>\n                    <Col lg={4}>\n                        {DATE_TYPES.EARTH === formData.dateType && <EarthDateSelector/>}\n                        {DATE_TYPES.SOL === formData.dateType && <SolDateSelector/>}\n                        <DateTypeSelector/>\n                    </Col>\n                    <Col lg={4}>\n                        <CameraSelector/>\n                    </Col>\n                </Row>\n            </Form>\n        </Col>\n    )\n};\n\nexport const mapStateToProps = (state: AppState) => {\n    return {\n        formData: state.formReducer\n    };\n};\n\nexport default connect(mapStateToProps, {fetchImages})(RoverForm);\n","import React from 'react'\nimport {Carousel, Col, Row, Spinner} from 'react-bootstrap';\n\nimport {connect} from \"react-redux\";\nimport {ImageProps} from \"../redux/images/ImageTypes\";\nimport {AppState} from \"../redux/reducers\";\n\nexport const RoverImages = ({images, Pending, Error}:\n                                { images: ImageProps[] | null, Pending: boolean, Error: string }) => {\n    return (\n        <Row className=\"result_list justify-content-center\">\n            <Col lg={6}>\n                {Pending && <>Searching for Images... <Spinner animation=\"grow\"></Spinner></>}\n\n                {null !== images && images.length > 0 &&\n                <Carousel>\n                    {images.map((row) =>\n                        <Carousel.Item key={row.id}>\n                            <img\n                                className=\"d-block w-100\"\n                                src={row.img_src}\n                                alt=\"{row.id}\"\n                            />\n                            <Carousel.Caption>\n                                <h3>{row.id}</h3>\n                                <p>Taken\n                                    by {row.camera.full_name} ({row.camera.name}) <br/>\n                                    on {row.earth_date} (Sol {row.sol})\n                                </p>\n                            </Carousel.Caption>\n                        </Carousel.Item>)}\n                </Carousel>\n                }\n                {null !== images && 1 > images.length && !Pending && !Error &&\n                <p> No images found for selected parameters...</p>}\n                {Error &&\n                <p className=\"errorMessage\">The following errors occurred: {Error}</p>}\n            </Col>\n        </Row>\n    )\n};\n\nexport const mapStateToProps = (state: AppState) => {\n    return {\n        images: state.imageReducer.images,\n        Pending: state.imageReducer.pending,\n        Error: state.imageReducer.error\n    };\n};\n\nexport default connect(mapStateToProps)(RoverImages);\n","import {Col, Row, Spinner} from \"react-bootstrap\";\nimport RoverForm from \"./RoverForm\";\nimport RoverImages from \"./RoverImages\";\nimport React from \"react\";\nimport {AppState} from \"../redux/reducers\";\nimport {connect} from \"react-redux\";\nimport {RoverProps} from \"../redux/rovers/RoverTypes\";\n\nconst Search = ({fetchPending, fetchError, rovers}: { fetchRovers: () => void, fetchPending: boolean, fetchError: string, rovers: RoverProps[] }) => {\n    return (\n        <>\n            {\n                false !== fetchPending && <><h3>Connecting... <Spinner animation=\"grow\"></Spinner></h3></>\n            }\n            {\n                '' !== fetchError && <h3> An error occurred while fetching Rover data.</h3>\n            }\n            {\n                false === fetchPending &&\n                '' === fetchError &&\n                rovers.length &&\n                <div className={'roversWrapper'}>\n                  <Row>\n                    <div className=\"largeSpacer\"/>\n                    <RoverForm/>\n                  </Row>\n                  <Row>\n                    <Col lg={12}>\n                      <div className=\"largeSpacer\"/>\n                      <div className=\"resultList\">\n                        <RoverImages/>\n                      </div>\n                    </Col>\n                  </Row>\n                </div>\n            }\n        </>\n    )\n}\n\nexport const mapStateToProps = (state: AppState) => {\n    return {\n        fetchError: state.roverReducer.error,\n        fetchPending: state.roverReducer.pending,\n        rovers: state.roverReducer.rovers\n    };\n};\n\nexport default connect(mapStateToProps)(Search);","import React from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport Rover from './components/Rover';\nimport WelcomeContent from \"./components/WelcomeContent\";\nimport Search from \"./components/Search\";\n\n\nconst routes = () => (\n    <>\n        <Route path=\"/home\" component={WelcomeContent} />\n        <Route path=\"/curiosity\" render={(props) => <Rover {...props} name={'Curiosity'}/>}/>\n        <Route path=\"/spirit\" render={(props) => <Rover {...props} name={'Spirit'}/>}/>\n        <Route path=\"/opportunity\" render={(props) => <Rover {...props} name={'Opportunity'}/>}/>\n        <Route path=\"/search\" component={Search}/>\n        <Redirect from=\"/\" to=\"/home\" />\n    </>\n);\nexport default routes;","import React, {useEffect} from 'react'\nimport {Col, Container, Navbar, Row, Spinner} from 'react-bootstrap';\n\nimport Rovers from './components/Rovers';\nimport RoverImages from './components/RoverImages';\nimport RoverForm from './components/RoverForm';\n\nimport {connect} from \"react-redux\";\nimport {fetchRovers} from \"./redux/rovers/RoverActions\";\nimport {RoverProps} from \"./redux/rovers/RoverTypes\";\nimport {AppState} from \"./redux/reducers\";\nimport {Navigation} from \"./components/Navigation\";\nimport {HashRouter} from \"react-router-dom\";\nimport Routes from './routes';\n\nexport const App = ({fetchPending, fetchError, rovers, fetchRovers}: { fetchRovers: () => void, fetchPending: boolean, fetchError: string, rovers: RoverProps[] }) => {\n    useEffect(() => {\n        fetchRovers();\n    }, [fetchRovers]); /* <-- Fetch API data only on first render to avoid infinite loop --> */\n\n    return (\n        <React.Fragment>\n            <HashRouter basename={'/'}>\n                <Navigation />\n                <Container>\n                    <Row>\n                        <Col lg={12}>\n                            <Routes />\n                         </Col>\n                    </Row>\n                </Container>\n            </HashRouter>\n        </React.Fragment>\n    )\n};\n\nexport const mapStateToProps = (state: AppState) => {\n    return {\n        fetchError: state.roverReducer.error,\n        fetchPending: state.roverReducer.pending,\n        rovers: state.roverReducer.rovers\n    };\n};\n\nexport default connect(mapStateToProps, {fetchRovers})(App);\n","import {FETCH_ROVERS_ERROR, FETCH_ROVERS_PENDING, FETCH_ROVERS_SUCCESS} from \"../actionTypes\";\nimport axios from 'axios';\nimport {API_ROVERS_ENDPOINT} from \"../../constants\";\nimport {FetchRoversErrorAction, FetchRoversPendingAction, FetchRoversSuccessAction, RoverProps} from \"./RoverTypes\";\n\nexport const fetchRoversPending = (): FetchRoversPendingAction => ({\n    type: FETCH_ROVERS_PENDING\n});\n\nexport const fetchRoversSuccess = (payload: RoverProps[]): FetchRoversSuccessAction => ({\n    type: FETCH_ROVERS_SUCCESS, payload\n});\n\n\nexport const fetchRoversError = (payload: string): FetchRoversErrorAction => ({\n    type: FETCH_ROVERS_ERROR, payload\n});\n\nexport const fetchRovers = () => {\n    return (dispatch: any) => {\n        dispatch(fetchRoversPending());\n        axios.get(API_ROVERS_ENDPOINT)\n            .then(res => {\n                dispatch(fetchRoversSuccess(res.data.rovers));\n            })\n            .catch(error => {\n                dispatch(fetchRoversError(error));\n            })\n\n    };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nimport './index.scss';\nimport App from './App';\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    rootElement\n);\n"],"sourceRoot":""}